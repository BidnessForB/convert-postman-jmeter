version: 2.1

jobs:
  build:
    docker:
      - image: circleci/node:7.10
    working_directory: ~/repo
    steps:
        - checkout
        - restore_cache:
            keys:
              - v1-dependencies-{{ checksum "package.json" }}
              - v1-dependencies-
        - run: npm install
        - run: npm run lint
        - save_cache:
            paths:
              - node_modules
            key: v1-dependencies-{{ checksum "package.json" }}
        - run: npm test
        - run:
            name: 'Runing test'
            command: |
              ./node_modules/.bin/nyc ./node_modules/.bin/mocha test --reporter mocha-junit-reporter --reporter-options mochaFile=./reports/mocha/test-results.xml
            when: always
        - run:
            name: eslint
            command: |
              ./node_modules/.bin/eslint ./lib --format junit --output-file ./reports/eslint/eslint.xml
            when: always
        - store_test_results:
            path: ./reports
        - store_artifacts:
            path: ./reports/mocha/test-results.xml
        - store_artifacts:
            path: ./reports/eslint/eslint.xml
        - run:
            name: 'Generate pack'
            command: npm pack
        - store_artifacts:
            path: ./convert-postman-jmeter-1.0.1.tgz
        - run:
            name: Install Sonarqube scanner
            command: |
              wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.3.0.1492-linux.zip
              unzip sonar-scanner-cli-3.3.0.1492-linux.zip
        - run:
            name: Run Sonarqube scanner
            command: |
              export SONAR_SCANNER_OPTS="-Xmx2048m"
              eval ./sonar-scanner-3.3.0.1492-linux/bin/sonar-scanner -Dsonar.projectKey=convert-postman-jmeter \
              -Dsonar.sources=. \
              -Dsonar.sourceEncoding=US-ASCII \
              -Dsonar.exclusions=node_modules/**,sonar-scanner-3.3.0.1492-linux/** \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.projectVersion=${CIRCLE_BRANCH} \
              -Dsonar.login=${SONARQUBE_TOKEN} $SONAR_SCANNER_OPTS_CUSTOM

  deploy-stage:
    docker:
      - image: circleci/node:7.10
    working_directory: ~/repo
    steps:
        - checkout
        - restore_cache:
            keys:
              - v1-dependencies-{{ checksum "package.json" }}
              - v1-dependencies-
        - run:
            name: Authenticate with registry
            command: echo "//registry.npmjs.org/:_authToken=$npm_TOKEN" > ~/repo/.npmrc
        - deploy:
            name: Publish package
            command: npm publish --tag beta

  deploy-prod:
    docker:
      - image: circleci/node:7.10
    working_directory: ~/repo
    steps:
        - checkout
        - restore_cache:
            keys:
              - v1-dependencies-{{ checksum "package.json" }}
              - v1-dependencies-
        - run:
            name: Authenticate with registry
            command: echo "//registry.npmjs.org/:_authToken=$npm_TOKEN" > ~/repo/.npmrc
        - deploy:
            name: 'Publish package'
            command: npm publish

workflows:
  version: 2
  build-deploy:
    jobs:
      - build:
           filters:
             branches:
               ignore:
                 - develop
      - deploy-stage:
          requires:
            - build
          filters:
            branches:
              only: staging
      - deploy-prod:
          requires:
            - build
          filters:
            branches:
              only: master
