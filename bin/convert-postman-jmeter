#!/usr/bin/env node

'use strict';

const path = require('path');
const fs = require('fs');


const { fstat } = require('fs');
const os = require('os');
const argv = require('yargs')
    .scriptName('convert-postman-jmeter')
    .usage('Usage: $0 -p [file] -j [file]')
    .alias('p', 'postman')
    .describe('p', 'Load project postman')
    .alias('j', 'jmeter')
    .describe('j', 'Output project JMeter')
    .alias('o', 'override')
    .describe('o', 'Override project JMeter')
    .boolean('o')
    .default('o', false)
    .alias('v', 'variables')
    .describe('v','Transform collection variables to JMeter User Defined Variables')
    .default('v','resolve')
    .choices('v',['transform','resolve','raw'])
    .string('v')
    .alias('b', 'batch')
    .describe('b', 'Export all projects postman from folder path by name *.postman_collection.json')
    .default('b', '')
    .epilog('Copyright 2021').argv;

const convertPostmanJmeter = require('../lib/convert-postman-jmeter');

const validPathRegex = /^\/([A-z0-9-_+ ]+\/)*([A-z0-9-_ ]+\.?[A-z0-9-_+]*)$/gm;


const options = {
    projectPostman: argv.p,
    projectJmeter: argv.j,
    override: argv.o,
    batchFolder: argv.b,
    varMode: argv.v
};

//validate paths are formatted correctly
if(validPathRegex.test(options.projectPostman) === false)
{
    console.error("Invalid path for postman collection: " + options.projectPostman);
    return -1;
}

if(!options.projectJmeter.match(validPathRegex))
{
    console.error("Invalid path for postman collection: " + options.projectJmeter);
    return -1;
}
//validate options, can probably be done with yargs

if(!fs.existsSync(options.projectPostman))
{
    console.error("Postman collection file " + options.projectPostman + " not found.");
    return -1;
}



console.log("OPTIONS: " + JSON.stringify(options));
convertPostmanJmeter.convert(options);
